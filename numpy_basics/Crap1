HIMANSHUs-MacBook-Pro:numpy_basics himanshu$ source activate py27
(py27) HIMANSHUs-MacBook-Pro:numpy_basics himanshu$ python
Python 2.7.13 |Anaconda custom (x86_64)| (default, Dec 20 2016, 23:05:08) 
[GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.57)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
Anaconda is brought to you by Continuum Analytics.
Please check out: http://continuum.io/thanks and https://anaconda.org
>>> import numpy as np
>>> 
>>> #null vector of size 10
... 
>>> z = np.zeros(10)
>>> print z
[ 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]
>>> z[4] = 1
>>> print z
[ 0.  0.  0.  0.  1.  0.  0.  0.  0.  0.]
>>> 
>>> "vector with values ranging from 20 t0 45"
'vector with values ranging from 20 t0 45'
>>> z = np.arange(20,46)
>>> print z
[20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44
 45]
>>> 
>>> # Reverse a vector
... 
>>> z = z[::-1]
>>> print z
[45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21
 20]
>>> 
>>> # 3X3 matrix with values ranging from 0 to 8
... 
>>> a = np.arange(9).reshape(3,3)
>>> print a
[[0 1 2]
 [3 4 5]
 [6 7 8]]
>>> 
>>> 
>>> # Finding indices of non zero elements from a matrix
... 
>>> ind = np.nonzero([0,0,2,0])
>>> print ind
(array([2]),)
>>> print(ind)
(array([2]),)
>>> ind = np.nonzero([0,0,2,0,1,1,1])
>>> print(ind)
(array([2, 4, 5, 6]),)
>>> 
>>> 
>>> # Identity Matrix
... 
>>> i = np.eye(3)
>>> print i
[[ 1.  0.  0.]
 [ 0.  1.  0.]
 [ 0.  0.  1.]]
>>> 
>>> 
>>> # matrix with random values
... 
>>> r = np.random.random((3,3,3))
>>> print r
[[[ 0.04545511  0.54658085  0.17143541]
  [ 0.4261131   0.49194068  0.19534855]
  [ 0.33937991  0.5888766   0.99632345]]

 [[ 0.88141399  0.43401084  0.44722626]
  [ 0.00317955  0.37391264  0.54940868]
  [ 0.15888498  0.70071532  0.39698336]]

 [[ 0.40407642  0.72436136  0.57503545]
  [ 0.66515936  0.80280668  0.16731838]
  [ 0.88607058  0.53660587  0.94777712]]]
>>> 
>>> 
>>> # Find min max values from random matrix
... 
>>> mat = np.random.random((5,5))
>>> min, max = mat.min(), mat.max()
>>> print min, max
0.0420501904388 0.996522656
>>> print mat
[[ 0.51385969  0.79587341  0.52368691  0.04205019  0.71350548]
 [ 0.68887751  0.41769588  0.28951454  0.57976841  0.31744945]
 [ 0.07606084  0.78786228  0.04461211  0.07598076  0.14208135]
 [ 0.44201335  0.41658258  0.72863254  0.66940037  0.75118645]
 [ 0.33516198  0.77558077  0.56810897  0.11645249  0.99652266]]
>>> 
>>> 
>>> # finding mean
... 
>>> mean = np.mean(mat)
>>> print mean
0.472340838039
>>> 
>>> 
>>> # 2d array with 1 on border and 0 inside
... 
>>> a = np.ones((5, 5))
>>> a[1:-1, 1:-1] = 0
>>> pritn a
  File "<stdin>", line 1
    pritn a
          ^
SyntaxError: invalid syntax
>>> print a
[[ 1.  1.  1.  1.  1.]
 [ 1.  0.  0.  0.  1.]
 [ 1.  0.  0.  0.  1.]
 [ 1.  0.  0.  0.  1.]
 [ 1.  1.  1.  1.  1.]]
>>> 
>>> 
>>> # some experiments
... 
>>> 0 * np.nan
nan
>>> np.nan == np.nan
False
>>> np.inf > np.nan
False
>>> np.non - np.nan
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'module' object has no attribute 'non'
>>> np.nan - np.nan
nan
>>> 0.3 == 3*0.1
False
>>> 3*0.1 - 0.3
5.551115123125783e-17
>>> # this actually explains the reason of last to last experiment. Actually (3*0.1) gives a product which has a floating point representation as given below, which is ofcource not equal to 0.3
... 
>>> 3*0.1
0.30000000000000004
>>> # Floating point representation is always an approximation 
... 
>>> 
>>> 
>>> # Keep Practicing 
... 
